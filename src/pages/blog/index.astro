---
import { RootLayout } from "@/layouts";
import { TopNav, FooterSimple } from "@/components/ui";
import { PostCard } from "@/components/blog";
import { listPostsGQL } from "@/services";
import { getCollection } from "astro:content";
import { formatDate } from "@/lib";

const PAGE_SIZE = 9;
const { searchParams } = Astro.url;
const q = (searchParams.get("q") || "").trim().toLowerCase();
const tag = (searchParams.get("tag") || "").trim().toLowerCase();
const pageParam = Number(searchParams.get("page") || "1");
const currentPage = Number.isFinite(pageParam) && pageParam > 0 ? pageParam : 1;

type Card = {
  href: string;
  title: string;
  excerpt: string;
  cover: string;
  tags: string[];
  date: string;
};

let list: {
  title: string;
  slug: string;
  excerpt?: string;
  cover?: string;
  tags?: string[];
  date?: string;
}[] = [];

try {
  const raw = await listPostsGQL();
  list = raw.map((p) => ({
    title: p.title,
    slug: p.slug,
    excerpt:
      (p.seoMeta as any)?.excerpt ??
      (p.content ? p.content.slice(0, 160) + "…" : ""),
    cover:
      (p.seoMeta as any)?.cover ??
      (p.seoMeta as any)?.image ??
      "/assets/png/DEVI NORMAL.png",
    tags: p.tags?.map((t) => t.name) ?? [],
    date: p.publishedAt ? formatDate(p.publishedAt) : "",
  }));
} catch (e) {
  console.error("[Blog/index] GraphQL falló:", e);
}

if (list.length === 0) {
  const all = await getCollection(
    "posts",
    ({ data }) => data.published !== false
  );
  all.sort(
    (a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
  );
  list = all.map((p) => ({
    title: p.data.title,
    slug: p.slug,
    excerpt: p.data.excerpt ?? "",
    cover: p.data.cover ?? "/assets/png/DEVI NORMAL.png",
    tags: (p.data.tags ?? []) as string[],
    date: p.data.date ? formatDate(p.data.date as any) : "",
  }));
}

let filtered = list.filter((p) => {
  const matchesQ =
    !q ||
    p.title.toLowerCase().includes(q) ||
    (p.excerpt ?? "").toLowerCase().includes(q) ||
    (p.tags ?? []).some((t) => t.toLowerCase().includes(q));
  const matchesTag =
    !tag || (p.tags ?? []).some((t) => t.toLowerCase() === tag);
  return matchesQ && matchesTag;
});

const totalPages = Math.max(1, Math.ceil(filtered.length / PAGE_SIZE));
const page = Math.min(currentPage, totalPages);
const start = (page - 1) * PAGE_SIZE;
const end = start + PAGE_SIZE;
const pageItems: Card[] = filtered.slice(start, end).map((p) => ({
  href: `/blog/${p.slug}/`,
  title: p.title,
  excerpt: p.excerpt ?? "",
  cover: p.cover ?? "/assets/png/DEVI NORMAL.png",
  tags: p.tags ?? [],
  date: p.date ?? "",
}));

const tagSet = new Set<string>();
list.forEach((p) => (p.tags ?? []).forEach((t) => tagSet.add(t)));
const tags = Array.from(tagSet).sort((a, b) => a.localeCompare(b));

function pageHref(n: number) {
  const params = new URLSearchParams();
  if (q) params.set("q", q);
  if (tag) params.set("tag", tag);
  params.set("page", String(n));
  return `/blog/?${params.toString()}`;
}
function tagHref(t: string) {
  const params = new URLSearchParams();
  if (q) params.set("q", q);
  params.set("tag", t);
  params.set("page", "1");
  return `/blog/?${params.toString()}`;
}
function clearFiltersHref() {
  const params = new URLSearchParams();
  // sin q ni tag
  params.set("page", "1");
  return `/blog/?${params.toString()}`;
}
---

<RootLayout title="Blog" description="Artículos técnicos de la comunidad">
  <TopNav client:load />

  <!-- Hero / Header -->
  <header
    class="section relative bg-gradient-to-b from-[var(--surface-0)] to-[var(--surface-1)]"
  >
    <div class="absolute inset-0 -z-10 bg-grid"></div>
    <div class="mx-auto max-w-6xl px-6">
      <div
        class="mx-auto mb-4 inline-flex items-center gap-2 rounded-full border border-white/10 bg-white/5 px-3 py-1 text-xs text-[var(--color-text)] md:mx-0"
      >
        <span class="relative inline-flex h-2 w-2" aria-hidden="true">
          <span
            class="absolute inline-flex h-full w-full rounded-full bg-[var(--color-accent)] opacity-75 motion-safe:animate-[ping_1.6s_ease-in-out_infinite]"
          ></span>
          <span
            class="relative inline-flex h-2 w-2 rounded-full bg-[var(--color-accent)]"
          ></span>
        </span>
        Artículos del blog
      </div>

      <h1 class="text-3xl md:text-4xl font-extrabold text-[var(--color-title)]">
        Blog
      </h1>
      <p class="mt-2 text-[var(--color-text)]/75 max-w-2xl">
        Lectura cómoda, temas prácticos y ejemplos directos. Explora por
        etiquetas o usa el buscador.
      </p>

      <!-- Buscador -->
      <form method="get" class="mt-6 max-w-xl">
        <!-- Conserva el tag activo -->
        {tag && <input type="hidden" name="tag" value={tag} />}
        <label class="sr-only" for="search">Buscar</label>
        <div class="flex items-center gap-2">
          <input
            id="search"
            name="q"
            type="search"
            placeholder="Buscar artículos…"
            value={q}
            class="w-full rounded-lg border border-white/10 bg-white/5 px-3 py-2 text-sm text-[var(--color-text)] placeholder:text-[var(--color-text)]/50 focus:outline-none focus:ring-2 focus:ring-[var(--color-accent)]/40"
          />
          <button
            class="rounded-lg border border-white/10 bg-white/5 px-3 py-2 text-sm hover:bg-white/10"
          >
            Buscar
          </button>
        </div>
      </form>

      <!-- Filtros por etiqueta -->
      {
        tags.length > 0 && (
          <div class="mt-4 flex flex-wrap gap-2">
            <a
              href={clearFiltersHref()}
              class={
                "rounded-full px-3 py-1 text-xs border " +
                (!tag && !q
                  ? "border-[var(--color-accent)]/40 bg-[var(--color-accent)]/10 text-[var(--color-title)]"
                  : "border-white/10 bg-white/5 hover:bg-white/10 text-[var(--color-text)]/80")
              }
            >
              Todos
            </a>
            {tags.map((t) => (
              <a
                href={tagHref(t)}
                class={
                  "rounded-full px-3 py-1 text-xs border " +
                  (tag === t.toLowerCase()
                    ? "border-[var(--color-accent)]/40 bg-[var(--color-accent)]/10 text-[var(--color-title)]"
                    : "border-white/10 bg-white/5 hover:bg-white/10 text-[var(--color-text)]/80")
                }
              >
                {t}
              </a>
            ))}
          </div>
        )
      }

      {/* Estado de búsqueda/filtros */}
      {
        (q || tag) && (
          <div class="mt-3 text-xs text-[var(--color-text)]/70">
            {q && (
              <>
                Resultados para{" "}
                <span class="font-medium text-[var(--color-title)]">“{q}”</span>
                {tag && " · "}
              </>
            )}
            {tag && (
              <>
                Etiqueta{" "}
                <span class="font-medium text-[var(--color-title)]">
                  “{tag}”
                </span>
              </>
            )}
            {" · "}
            <a
              href={clearFiltersHref()}
              class="underline text-[var(--color-accent)]"
            >
              Limpiar
            </a>
          </div>
        )
      }
    </div>
  </header>

  <!-- Grid de posts -->
  <section class="section relative bg-[var(--surface-0)]">
    <div class="mx-auto max-w-6xl px-6">
      {
        pageItems.length > 0 ? (
          <>
            <div class="grid auto-rows-fr gap-6 sm:grid-cols-2 lg:grid-cols-3">
              {pageItems.map((p) => (
                <div class="h-full">
                  <PostCard post={p} />
                </div>
              ))}
            </div>

            {totalPages > 1 && (
              <nav class="mt-10 flex items-center justify-center gap-2 text-sm">
                <a
                  class={`rounded-md border px-3 py-1 ${page > 1 ? "border-white/10 bg-white/5 hover:bg-white/10" : "pointer-events-none border-white/5 opacity-50"}`}
                  href={page > 1 ? pageHref(page - 1) : "#"}
                >
                  ← Anterior
                </a>
                {Array.from({ length: totalPages }, (_, i) => i + 1).map(
                  (n) => (
                    <a
                      href={pageHref(n)}
                      class={`rounded-md px-3 py-1 ${n === page ? "bg-[var(--color-accent)] text-[var(--color-accent-foreground)]" : "text-[var(--color-text)]/80 hover:bg-white/10"}`}
                    >
                      {n}
                    </a>
                  )
                )}
                <a
                  class={`rounded-md border px-3 py-1 ${page < totalPages ? "border-white/10 bg-white/5 hover:bg-white/10" : "pointer-events-none border-white/5 opacity-50"}`}
                  href={page < totalPages ? pageHref(page + 1) : "#"}
                >
                  Siguiente →
                </a>
              </nav>
            )}
          </>
        ) : (
          <p class="text-center text-[var(--color-text)]/70">
            No encontramos artículos que coincidan con tu búsqueda.
          </p>
        )
      }
    </div>
  </section>

  <FooterSimple client:load />
</RootLayout>
