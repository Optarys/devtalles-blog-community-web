---
import { RootLayout } from "@/layouts";
import { TopNav, FooterSimple } from "@/components/ui";
import { Reactions, Comments } from "@/components/blog";
import { getCollection, type CollectionEntry } from "astro:content";
import { formatDate } from "@/lib";
import { listPostsGQL, getPostBySlugGQL } from "@/services/posts.graphql";

type PostEntry = CollectionEntry<"posts">;

export async function getStaticPaths() {
  try {
    const posts = await listPostsGQL();
    if (Array.isArray(posts) && posts.length) {
      return posts
        .filter((p) => !!p.slug)
        .map((p) => ({ params: { slug: p.slug } }));
    }
  } catch {
  }

  const md = await getCollection("posts", ({ data }) => data.published !== false);
  return md.map((p) => ({ params: { slug: p.slug } }));
}

const { slug } = Astro.params as { slug: string };
if (!slug) return new Response("Not found", { status: 404 });

let title = "";
let date = "";
let publishedIso: string | null = null;
let tags: string[] = [];
let cover = "/assets/png/DEVI NORMAL.png";
let description = "";

let isMd = false;
let Content: any = null;
let html = "";

let prev: { slug: string; title: string } | null = null;
let next: { slug: string; title: string } | null = null;

try {
  const post = await getPostBySlugGQL(slug);

  title = post.title;
  if (post.publishedAt) {
    date = formatDate(post.publishedAt);
    try { publishedIso = new Date(post.publishedAt).toISOString(); } catch {}
  }
  tags = post.tags?.map((t) => t.name) ?? [];

  const seo = (post.seoMeta as any) ?? {};
  cover = seo.cover ?? seo.image ?? "/assets/png/DEVI NORMAL.png";
  description = seo.excerpt ?? "";

  html = post.content ?? "";
  isMd = false;

  const all = await listPostsGQL();
  all.sort((a, b) => (b.publishedAt ?? "").localeCompare(a.publishedAt ?? ""));
  const idx = all.findIndex((p) => p.slug === slug);
  if (idx !== -1) {
    if (idx < all.length - 1) prev = { slug: all[idx + 1].slug, title: all[idx + 1].title };
    if (idx > 0)              next = { slug: all[idx - 1].slug, title: all[idx - 1].title };
  }
} catch {
  const all: PostEntry[] = await getCollection("posts", ({ data }) => data.published !== false);
  const entry = all.find((p) => p.slug === slug);
  if (!entry) return new Response("Not found", { status: 404 });

  const rendered = await entry.render();
  Content = rendered.Content;

  const data = entry.data;
  title = data.title ?? entry.slug;
  if (data.date) {
    date = formatDate(data.date as any);
    try { publishedIso = new Date(data.date as any).toISOString(); } catch {}
  }
  tags = (Array.isArray(data.tags) ? data.tags : []) as string[];
  cover = data.cover ?? "/assets/png/DEVI NORMAL.png";
  description = data.excerpt ?? "";

  isMd = true;

  all.sort((a, b) => {
    const da = a.data.date ? new Date(a.data.date as any).getTime() : 0;
    const db = b.data.date ? new Date(b.data.date as any).getTime() : 0;
    return db - da;
  });
  const i = all.findIndex((p) => p.slug === entry.slug);
  if (i !== -1) {
    if (i < all.length - 1) prev = { slug: all[i + 1].slug, title: all[i + 1].data.title };
    if (i > 0)              next = { slug: all[i - 1].slug, title: all[i - 1].data.title };
  }
}

const site      = Astro.site?.toString().replace(/\/$/, "") ?? "";
const canonical = site ? `${site}/blog/${slug}/` : `/blog/${slug}/`;
const ogImage   = site ? (cover.startsWith("http") ? cover : `${site}${cover}`) : cover;

const articleJsonLd = {
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": title,
  "image": [ogImage],
  ...(publishedIso ? { "datePublished": publishedIso, "dateModified": publishedIso } : {}),
  "author": { "@type": "Organization", "name": "DevTalles Blog" },
  "mainEntityOfPage": { "@type": "WebPage", "@id": canonical }
};
---

<RootLayout title={title} description={description} image={ogImage} canonical={canonical}>
  <fragment slot="head">
    <meta property="og:type" content="article" />
    {publishedIso && <meta property="article:published_time" content={publishedIso} />}
    {tags.length > 0 && tags.map((t) => <meta property="article:tag" content={t} />)}
    <script type="application/ld+json">{JSON.stringify(articleJsonLd)}</script>
    <link rel="alternate" type="application/rss+xml" title="DevTalles Blog RSS" href="/rss.xml" />
  </fragment>

  <TopNav client:load />

  <header class="section relative bg-gradient-to-b from-[var(--surface-0)] to-[var(--surface-1)]">
    <div class="absolute inset-0 -z-10 bg-grid"></div>
    <div class="mx-auto max-w-3xl px-6">
      <a href="/blog/" class="text-sm text-[var(--color-text)]/70 hover:underline">← Volver al blog</a>
      <h1 class="mt-3 text-3xl md:text-4xl font-extrabold text-[var(--color-title)]">{title}</h1>

      <div class="mt-3 flex flex-wrap items-center gap-3 text-sm text-[var(--color-text)]/70">
        {date && <span>{date}</span>}
        {tags.length > 0 && (
          <div class="flex flex-wrap gap-2">
            {tags.map((t) => (
              <span class="rounded-full bg-[var(--color-accent)]/18 px-3 py-1 text-[10px] font-medium text-[var(--color-accent)]">
                {t}
              </span>
            ))}
          </div>
        )}
      </div>
    </div>
  </header>

  <div class="bg-[var(--surface-1)]">
    <div class="mx-auto max-w-5xl px-6 pb-6 pt-2">
      <img
        src={cover}
        alt={title}
        class="w-full rounded-xl border border-white/10 object-cover"
        loading="eager"
        decoding="async"
      />
    </div>
  </div>

  <article class="section mx-auto max-w-3xl px-6">
    <div class="prose prose-invert max-w-none prose-headings:text-[var(--color-title)] prose-p:text-[var(--color-text)] prose-a:text-[var(--color-accent)] prose-strong:text-[var(--color-title)]">
      {isMd ? <Content /> : <div set:html={html}></div>}
    </div>

    <div class="mt-10">
      <Reactions client:visible slug={slug} />
    </div>

    <div class="mt-10">
      <Comments client:visible slug={slug} />
    </div>

    {(prev || next) && (
      <nav class="mt-12 grid grid-cols-2 gap-4">
        <div>
          {prev && (
            <a href={`/blog/${prev.slug}/`} class="block rounded-lg border border-white/10 bg-white/5 p-4 hover:bg-white/10 transition">
              <span class="text-xs text-[var(--color-text)]/60">← Anterior</span>
              <div class="mt-1 font-medium text-[var(--color-title)] line-clamp-2">{prev.title}</div>
            </a>
          )}
        </div>
        <div class="text-right">
          {next && (
            <a href={`/blog/${next.slug}/`} class="block rounded-lg border border-white/10 bg-white/5 p-4 hover:bg-white/10 transition">
              <span class="text-xs text-[var(--color-text)]/60">Siguiente →</span>
              <div class="mt-1 font-medium text-[var(--color-title)] line-clamp-2">{next.title}</div>
            </a>
          )}
        </div>
      </nav>
    )}
  </article>

  <FooterSimple client:load />
</RootLayout>
