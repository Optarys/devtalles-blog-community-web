---
import { RootLayout } from "@/layouts";
import { TopNav, FooterSimple } from "@/components/ui";
import { Reactions, Comments } from "@/components/blog";
import { getCollection, type CollectionEntry } from "astro:content";
import { formatDate } from "@/lib";

type PostEntry = CollectionEntry<"posts">;

export async function getStaticPaths() {
  const posts = await getCollection("posts", ({ data }) => data.published !== false);
  return posts.map((p) => ({ params: { slug: p.slug } }));
}

const { slug } = Astro.params as { slug: string };
if (!slug) throw new Error("Slug requerido");

const all: PostEntry[] = await getCollection(
  "posts",
  ({ data }) => data.published !== false
);

const entry = all.find((p) => p.slug === slug);
if (!entry) throw Astro.redirect("/blog/");

const { Content } = await entry.render();
const data = entry.data;

const title = data.title ?? entry.slug;
const dateObj = data.date ? new Date(data.date as any) : undefined;
const date = dateObj ? formatDate(dateObj) : "";
const tags = (Array.isArray(data.tags) ? data.tags : []) as string[];
const cover = data.cover ?? "/assets/png/DEVI NORMAL.png";

// Orden para prev/next
all.sort((a, b) => {
  const da = a.data.date ? new Date(a.data.date as any).getTime() : 0;
  const db = b.data.date ? new Date(b.data.date as any).getTime() : 0;
  return db - da;
});
const idx = all.findIndex((p) => p.slug === entry.slug);
const prev = idx < all.length - 1 ? all[idx + 1] : null;
const next = idx > 0 ? all[idx - 1] : null;

// Canonical absoluto si hay site
const site = Astro.site?.toString().replace(/\/$/, "") ?? "";
const canonical = site ? `${site}/blog/${entry.slug}/` : `/blog/${entry.slug}/`;

// OG image absoluta si hay site
const ogImage = site
  ? (cover.startsWith("http") ? cover : `${site}${cover}`)
  : cover;

// JSON-LD Article
const articleJsonLd = {
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": title,
  "image": [ogImage],
  ...(dateObj ? { "datePublished": dateObj.toISOString(), "dateModified": dateObj.toISOString() } : {}),
  "author": { "@type": "Organization", "name": "DevTalles Blog" },
  "mainEntityOfPage": { "@type": "WebPage", "@id": canonical }
};
---

<!-- Pasas props SEO al layout aquí -->
<RootLayout title={title} description={data.excerpt ?? ""} image={ogImage} canonical={canonical}>
  <!-- Inyección extra al <head> del layout -->
  <fragment slot="head">
    <!-- Marca este post como "article" en OG -->
    <meta property="og:type" content="article" />
    {dateObj && <meta property="article:published_time" content={dateObj.toISOString()} />}
    {tags.length > 0 && tags.map((t) => <meta property="article:tag" content={t} />)}
    <!-- JSON-LD Article -->
    <script type="application/ld+json">{JSON.stringify(articleJsonLd)}</script>
    <!-- RSS link (opcional, útil para descubrimiento) -->
    <link rel="alternate" type="application/rss+xml" title="DevTalles Blog RSS" href="/rss.xml" />
  </fragment>

  <TopNav client:load />

  <header class="section relative bg-gradient-to-b from-[var(--surface-0)] to-[var(--surface-1)]">
    <div class="absolute inset-0 -z-10 bg-grid"></div>
    <div class="mx-auto max-w-3xl px-6">
      <a href="/blog/" class="text-sm text-[var(--color-text)]/70 hover:underline">← Volver al blog</a>
      <h1 class="mt-3 text-3xl md:text-4xl font-extrabold text-[var(--color-title)]">{title}</h1>

      <div class="mt-3 flex flex-wrap items-center gap-3 text-sm text-[var(--color-text)]/70">
        {date && <span>{date}</span>}
        {tags.length > 0 && (
          <div class="flex flex-wrap gap-2">
            {tags.map((t: string) => (
              <span class="rounded-full bg-[var(--color-accent)]/18 px-3 py-1 text-[10px] font-medium text-[var(--color-accent)]">
                {t}
              </span>
            ))}
          </div>
        )}
      </div>
    </div>
  </header>

  <div class="bg-[var(--surface-1)]">
    <div class="mx-auto max-w-5xl px-6 pb-6 pt-2">
      <img
        src={cover}
        alt={title}
        class="w-full rounded-xl border border-white/10 object-cover"
        loading="eager"
        decoding="async"
      />
    </div>
  </div>

  <!-- Contenido -->
  <article class="section mx-auto max-w-3xl px-6">
    <div class="prose prose-invert max-w-none prose-headings:text-[var(--color-title)] prose-p:text-[var(--color-text)] prose-a:text-[var(--color-accent)] prose-strong:text-[var(--color-title)]">
      <Content />
    </div>

    <div class="mt-10">
      <Reactions client:visible slug={entry.slug} />
    </div>

    <div class="mt-10">
      <Comments client:visible slug={entry.slug} />
    </div>

    {(prev || next) && (
      <nav class="mt-12 grid grid-cols-2 gap-4">
        <div>
          {prev && (
            <a href={`/blog/${prev.slug}/`} class="block rounded-lg border border-white/10 bg-white/5 p-4 hover:bg-white/10 transition">
              <span class="text-xs text-[var(--color-text)]/60">← Anterior</span>
              <div class="mt-1 font-medium text-[var(--color-title)] line-clamp-2">{prev.data.title}</div>
            </a>
          )}
        </div>
        <div class="text-right">
          {next && (
            <a href={`/blog/${next.slug}/`} class="block rounded-lg border border-white/10 bg-white/5 p-4 hover:bg-white/10 transition">
              <span class="text-xs text-[var(--color-text)]/60">Siguiente →</span>
              <div class="mt-1 font-medium text-[var(--color-title)] line-clamp-2">{next.data.title}</div>
            </a>
          )}
        </div>
      </nav>
    )}
  </article>

  <FooterSimple client:load />
</RootLayout>
