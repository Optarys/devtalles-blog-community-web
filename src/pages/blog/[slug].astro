---
export const prerender = false;
import { RootLayout } from "@/layouts";
import { TopNav, FooterSimple } from "@/components/ui";
import { Reactions, Comments } from "@/components/blog";
import { getCollection, type CollectionEntry } from "astro:content";
import { formatDate } from "@/lib";
import { getAllPosts, getPostBySlug, type AdminPost } from "@/services";

const slugify = (s: string) => (s || "")
  .toLowerCase()
  .normalize("NFD").replace(/[\u0300-\u036f]/g, "")
  .replace(/[^a-z0-9]+/g, "-")
  .replace(/(^-|-$)+/g, "");
const stripTags = (s = "") => s.replace(/<[^>]*>/g, "").trim();
const ensureHeadingIds = (html = "") =>
  html.replace(/<h([2-4])(\s[^>]*)?>([\s\S]*?)<\/h\1>/gi, (_m, lvl, attrs = "", inner) => {
    const hasId = /\sid=("|')[^"']+(\1)/i.test(attrs);
    const id = hasId ? attrs.match(/\sid=("|')([^"']+)(\1)/i)?.[2] : slugify(stripTags(inner));
    const newAttrs = hasId ? attrs : `${attrs || ""} id="${id}"`;
    return `<h${lvl}${newAttrs}>${inner}</h${lvl}>`;
  });
const extractHeadings = (html = "") => {
  const out: { depth: number; slug: string; text: string }[] = [];
  const re = /<h([2-4])[^>]*id=("|')([^"']+)(\2)[^>]*>([\s\S]*?)<\/h\1>/gi;
  let m: RegExpExecArray | null;
  while ((m = re.exec(html))) {
    out.push({ depth: Number(m[1]), slug: m[3], text: stripTags(m[5]) });
  }
  return out;
};

type PostEntry = CollectionEntry<"posts">;

export async function getStaticPaths() {
  try {
    const posts = await getAllPosts({ status: "published" });
    if (Array.isArray(posts) && posts.length) {
      return posts
        .filter((p) => !!p.slug)
        .map((p) => ({ params: { slug: p.slug } }));
    }
  } catch {}

  const md = await getCollection("posts", ({ data }) => data.published !== false);
  return md.map((p) => ({ params: { slug: p.slug } }));
}

const { slug } = Astro.params as { slug: string };
if (!slug) return new Response("Not found", { status: 404 });

let initialComments: { id: string; name: string; text: string; ts: number }[] = [];
let postId = 0;

let title = "";
let date = "";
let publishedIso: string | null = null;
let tags: string[] = [];
let cover = "/assets/png/DEVI NORMAL.png";
let description = "";

let isMd = false;
let Content: any = null;
let html = "";
let headings: { depth: number; slug: string; text: string }[] = [];

let prev: { slug: string; title: string } | null = null;
let next: { slug: string; title: string } | null = null;

try {
  const post = await getPostBySlug(slug);
  if (!post) throw new Error("Not found");

  postId = post.id;

  title = post.title;

  if (post.date) {
    date = formatDate(post.date);
    try { publishedIso = new Date(post.date).toISOString(); } catch {}
  }

  tags = post.tags ?? [];
  cover = post.cover || "/assets/png/DEVI NORMAL.png";
  description = post.excerpt || "";

  html = post.content || "";
  isMd = false;

  const all: AdminPost[] = await getAllPosts({ status: "published" });
  all.sort((a, b) => (b.date || "").localeCompare(a.date || ""));

  const idx = all.findIndex((p) => p.slug === slug);
  if (idx !== -1) {
    if (idx < all.length - 1) prev = { slug: all[idx + 1].slug, title: all[idx + 1].title };
    if (idx > 0)              next = { slug: all[idx - 1].slug, title: all[idx - 1].title };
  }

  initialComments = post.comments ?? [];

  // HEADINGS: se derivan localmente desde el HTML (no tocamos servicios/types)
  html = ensureHeadingIds(html);
  headings = extractHeadings(html);
} catch (e) {
  console.error("[Blog/detail] GraphQL fall√≥:", e);
}

const site      = Astro.site?.toString().replace(/\/$/, "") ?? "";
const canonical = site ? `${site}/blog/${slug}/` : `/blog/${slug}/`;
const ogImage   = site ? (cover.startsWith("http") ? cover : `${site}${cover}`) : cover;

const articleJsonLd = {
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": title,
  "image": [ogImage],
  ...(publishedIso ? { "datePublished": publishedIso, "dateModified": publishedIso } : {}),
  "author": { "@type": "Organization", "name": "DevTalles Blog" },
  "mainEntityOfPage": { "@type": "WebPage", "@id": canonical }
};
---

<RootLayout title={title} description={description} image={ogImage} canonical={canonical}>
  <fragment slot="head">
    <meta property="og:type" content="article" />
    {publishedIso && <meta property="article:published_time" content={publishedIso} />}
    {tags.length > 0 && tags.map((t) => <meta property="article:tag" content={t} />)}
    <script type="application/ld+json">{JSON.stringify(articleJsonLd)}</script>
    <link rel="alternate" type="application/rss+xml" title="DevTalles Blog RSS" href="/rss.xml" />
  </fragment>

  <TopNav client:load />

  {/* ===== Layout principal al estilo DEV.to (grid 1/8/3) ===== */}
  <section class="bg-[var(--surface-1)]">
    <div class="mx-auto grid max-w-7xl grid-cols-1 gap-6 px-4 sm:px-6 lg:grid-cols-12 lg:gap-8">

      {/* Columna de acciones (izquierda) */}
      <aside class="relative hidden lg:block lg:col-span-1">
        <div class="sticky top-28 flex flex-col items-center gap-3 text-[var(--color-text)]/80">
          <a href="#comments" class="action-pill" aria-label="Ir a comentarios">üí¨</a>
          <a href="#top" class="action-pill" aria-label="Volver arriba">‚¨ÜÔ∏è</a>
          <button type="button" class="action-pill" aria-label="Guardar">üîñ</button>
        </div>
      </aside>

      {/* Columna de contenido */}
      <main id="top" class="lg:col-span-8 py-8">
        {/* Portada grande con ratio y bordes redondeados */}
        <figure class="overflow-hidden rounded-2xl border border-white/10 bg-white/5 shadow-md">
          <img src={cover} alt={title} class="aspect-[16/9] w-full object-cover" loading="eager" decoding="async" />
        </figure>

        {/* T√≠tulo y metadatos */}
        <header class="mt-6">
          <h1 class="text-3xl md:text-5xl font-black tracking-tight text-[var(--color-title)]">{title}</h1>
          <div class="mt-4 flex flex-wrap items-center gap-3 text-sm text-[var(--color-text)]/80">
            {date && <span class="inline-flex items-center gap-1">üìÖ {date}</span>}
            {tags.length > 0 && (
              <ul class="flex flex-wrap items-center gap-2">
                {tags.map((t) => (<li class="chip">#{t}</li>))}
              </ul>
            )}
          </div>
        </header>

        {/* Contenido */}
        <article class="post-prose prose prose-invert max-w-none prose-headings:text-[var(--color-title)] prose-p:text-[var(--color-text)] prose-a:text-[var(--color-accent)] prose-strong:text-[var(--color-title)] mt-6">
          {isMd ? <Content /> : <div set:html={html}></div>}
        </article>

        {/* Reacciones y comentarios */}
        <section class="mt-10">
          <Reactions client:visible slug={slug} />
        </section>
        <section id="comments" class="mt-10">
          <Comments client:visible postId={postId} slug={slug} initialComments={initialComments} />
        </section>

        {(prev || next) && (
          <nav aria-label="Navegaci√≥n de art√≠culos" class="mt-12 grid grid-cols-1 gap-4 sm:grid-cols-2">
            {prev && (
              <a href={`/blog/${prev.slug}/`} class="group block rounded-xl border border-white/10 bg-white/5 p-4 transition hover:bg-white/10">
                <span class="text-xs text-[var(--color-text)]/70">‚Üê Anterior</span>
                <div class="mt-1 line-clamp-2 font-medium text-[var(--color-title)] group-hover:underline">{prev.title}</div>
              </a>
            )}
            {next && (
              <a href={`/blog/${next.slug}/`} class="group block rounded-xl border border-white/10 bg-white/5 p-4 text-right transition hover:bg-white/10">
                <span class="text-xs text-[var(--color-text)]/70">Siguiente ‚Üí</span>
                <div class="mt-1 line-clamp-2 font-medium text-[var(--color-title)] group-hover:underline">{next.title}</div>
              </a>
            )}
          </nav>
        )}
      </main>

      {/* Sidebar derecha */}
      <aside class="lg:col-span-3 py-8 space-y-6">
        <section class="card">
          <h2 class="card-title">Autor</h2>
          <p class="mt-2 text-sm text-[var(--color-text)]/80">Publicado por la comunidad <strong>DevTalles</strong>.</p>
          {date && (<p class="mt-2 text-xs text-[var(--color-text)]/60">üìÖ {date}</p>)}
        </section>

        {headings?.length > 0 && (
          <section class="card" id="toc">
            <h2 class="card-title">En este art√≠culo</h2>
            <nav class="mt-3">
              <ul class="space-y-2 text-sm" id="toc-list">
                {headings.map((h) => (
                  <li class={`pl-${(h.depth - 1) * 3}`}>
                    <a href={`#${h.slug}`} class="toc-link text-[var(--color-text)]/80 hover:text-[var(--color-accent)]">{h.text}</a>
                  </li>
                ))}
              </ul>
            </nav>
          </section>
        )}

        <section class="card">
          <h2 class="card-title">Compartir</h2>
          <div class="mt-3 flex flex-wrap gap-2 text-xs">
            <a class="btn-soft" href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(title)}&url=${encodeURIComponent(canonical)}`} target="_blank" rel="noopener noreferrer">X/Twitter</a>
            <a class="btn-soft" href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(canonical)}`} target="_blank" rel="noopener noreferrer">LinkedIn</a>
            <a class="btn-soft" href={`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(canonical)}`} target="_blank" rel="noopener noreferrer">Facebook</a>
            <button class="btn-soft" type="button" onclick={`navigator.clipboard.writeText('${canonical}')`}>Copiar enlace</button>
          </div>
        </section>

        {tags.length > 0 && (
          <section class="card">
            <h2 class="card-title">Etiquetas</h2>
            <div class="mt-3 flex flex-wrap gap-2">
              {tags.map((t) => (<span class="chip">#{t}</span>))}
            </div>
          </section>
        )}
      </aside>

    </div>
  </section>

  <FooterSimple client:load />
</RootLayout>

<style is:global>
/* ===== Tokens visuales tipo DEV.to ===== */
.card { border: 1px solid rgba(255,255,255,0.10); background: rgba(255,255,255,0.05); border-radius: 0.75rem; padding: 1.25rem; }
.card-title { font-size: 0.9rem; font-weight: 600; color: var(--color-title); }
.chip { display: inline-flex; align-items: center; padding: 0.25rem 0.6rem; border-radius: 9999px; background: rgba(255,255,255,0.08); border: 1px solid rgba(255,255,255,0.10); color: var(--color-text); font-size: 0.75rem; }
.btn-soft { border: 1px solid rgba(255,255,255,0.10); background: rgba(255,255,255,0.05); padding: 0.35rem 0.65rem; border-radius: 0.45rem; }
.btn-soft:hover { background: rgba(255,255,255,0.08); }
.action-pill { display:flex; align-items:center; justify-content:center; width: 40px; height: 40px; border-radius: 9999px; border: 1px solid rgba(255,255,255,0.15); background: rgba(255,255,255,0.06); }
.action-pill:hover { background: rgba(255,255,255,0.10); }

/* Prosa */
.post-prose :where(img, video) { max-width: 100%; height: auto; margin: 1.25rem auto; border-radius: 0.75rem; border: 1px solid rgba(255,255,255,0.08); }
.post-prose :where(h2){ margin-top: 2.25rem; }
.post-prose :where(h3){ margin-top: 1.75rem; }
.post-prose :where(p){ line-height: 1.85; }
.post-prose pre { overflow-x: auto; padding: 1rem; border-radius: 0.75rem; border: 1px solid rgba(255,255,255,0.08); }

/* TOC activo */
.toc-link.active { color: var(--color-accent); text-decoration: underline; }
</style>

<script>
// Scrollspy simple para TOC
const links = Array.from(document.querySelectorAll('#toc .toc-link'));
if (links.length) {
  const sections = links
    .map((a) => {
      const href = a.getAttribute('href');
      if (!href) return null;
      return document.getElementById(href.slice(1));
    })
    .filter((el): el is HTMLElement => el !== null);
  const io = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      const id = entry.target.getAttribute('id');
      const link = links.find((a) => a.getAttribute('href') === `#${id}`);
      if (!link) return;
      if (entry.isIntersecting) { links.forEach((l) => l.classList.remove('active')); link.classList.add('active'); }
    });
  }, { rootMargin: '0px 0px -70% 0px', threshold: 0.1 });
  sections.forEach((sec) => {
    if (sec) io.observe(sec);
  });
}
</script>