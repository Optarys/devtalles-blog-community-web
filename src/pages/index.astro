---
import { RootLayout } from "@/layouts";
import { TopNav, FooterSimple, SectionDivider } from "@/components/ui";
import { Hero, PostList, Features, Mascot, CTA } from "@/components/sections";
import TopicsRail from "@/components/sections/TopicsRail.astro";
import FeaturedPosts from "@/components/sections/FeaturedPosts.astro";

const API_URL =
  import.meta.env.PUBLIC_API_URL ??
  "https://optarys-devtalles-blog-api.onrender.com";
const DEFAULT_NEXT = "/admin";
---

<RootLayout title="Inicio">
  <TopNav currentPath={Astro.url.pathname} client:load />

  <Hero />
  <TopicsRail />
  <FeaturedPosts />
  <PostList />

  <SectionDivider />

  <Features />

  <Mascot />
  <CTA />

  <FooterSimple client:load />
</RootLayout>

<script is:inline>
(() => {
  const LS_KEY = "dt:user";
  const COOKIE = "jwt";

  const readCookie = (name) => {
    const m = document.cookie.match(new RegExp("(?:^|; )" + name + "=([^;]*)"));
    return m ? decodeURIComponent(m[1]) : null;
  };
  const b64urlToB64 = (s) => {
    s = s.replace(/-/g, "+").replace(/_/g, "/");
    const pad = s.length % 4;
    return pad ? s + "=".repeat(4 - pad) : s;
  };
  const decodeJwt = (token) => {
    try {
      const [, payload] = token.split(".");
      if (!payload) return null;
      return JSON.parse(atob(b64urlToB64(payload)));
    } catch { return null; }
  };
  const extractUsername = (payload) => {
    const u = (payload?.username || payload?.name || payload?.preferred_username || payload?.sub || "").trim();
    return u || null;
  };
  const writeUser = (username) => {
    const next = username ? JSON.stringify({ username }) : null;
    const prev = localStorage.getItem(LS_KEY);
    if (next !== prev) {
      if (next) localStorage.setItem(LS_KEY, next);
      else localStorage.removeItem(LS_KEY);
    }
  };

  const refreshFromCookie = () => {
    try {
      const tok = readCookie(COOKIE);
      if (!tok) { writeUser(null); return; }
      const payload = decodeJwt(tok);
      writeUser(extractUsername(payload));
    } catch { /* noop */ }
  };

  refreshFromCookie();
  window.addEventListener("focus", refreshFromCookie);
  document.addEventListener("visibilitychange", () => { if (!document.hidden) refreshFromCookie(); });

  window.__dtSetUser = (u) => writeUser((u || "").trim() || null);
  window.__dtRefreshUser = refreshFromCookie;
})();
</script>

