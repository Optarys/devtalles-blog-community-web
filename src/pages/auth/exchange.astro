---
/**
 * OAuth: llama a /auth/oauth2/exchange (API) para setear cookie jwt y
 * además lee el JSON {email, username, roles} que devuelve, lo guarda en
 * cookie NO-HttpOnly temporal `dt_user`, y redirige a /auth/callback.
 */
const API_BASE = (import.meta.env.PUBLIC_API_URL ?? "").replace(/\/+$/, "");
const url = new URL(Astro.request.url);
const next = url.searchParams.get("next") ?? "/";
---

<!doctype html>
<html>
  <head><meta charset="utf-8" /><title>Intercambiando código…</title></head>
  <body>
    <p>Procesando autenticación…</p>

    <script
      is:inline
      data-api={API_BASE}
      data-next={next}
    >
      (async () => {
        const s = document.currentScript;
        const API  = s?.dataset.api  || "";
        const NEXT = s?.dataset.next || "/";

        try {
          const sp = new URLSearchParams(location.search);
          const code = sp.get("code");
          if (!code) return location.replace("/auth/login?error=falta_code");

          const res = await fetch(`${API}/auth/oauth2/exchange?code=${encodeURIComponent(code)}`, {
            credentials: "include",
            headers: { Accept: "application/json" },
          });
          if (!res.ok) throw new Error("exchange_failed");

          // Lee el JSON y deposítalo en cookie temporal dt_user (no-HttpOnly) para el callback
          try {
            const data = await res.json(); // { email, username, roles }
            const userLite = {
              email: data?.email ?? "",
              username: data?.username ?? data?.email ?? "",
              roles: Array.isArray(data?.roles) ? data.roles : []
            };
            const val = btoa(JSON.stringify(userLite));
            document.cookie = `dt_user=${val}; Max-Age=300; Path=/; SameSite=Lax`;
          } catch (_) {
            // si no viene body JSON, no pasa nada. El callback intentará decodificar el JWT.
          }

          // Redirige al callback, que escribe localStorage
          location.replace(`/auth/callback?next=${encodeURIComponent(NEXT)}`);
        } catch (e) {
          location.replace("/auth/login?error=" + encodeURIComponent(e?.message || "Error en exchange"));
        }
      })();
    </script>
  </body>
</html>
