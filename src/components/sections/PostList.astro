---
import PostCard from "@/components/blog/PostCard.astro";
import { listPostsGQL } from "@/services/posts.graphql";
import { formatDate } from "@/lib";

let cards: Array<{
  href: string;
  title: string;
  excerpt: string;
  cover: string;
  tags: string[];
  date: string;
}> = [];

try {
  // Si tu API filtra por estado, puedes usar { status: "published" }.
  // Si te devuelve vacío, prueba sin filtros.
  const raw = await listPostsGQL(/* { status: "published" } */);

  // ordenar por fecha desc
  raw.sort((a, b) => (b.publishedAt ?? "").localeCompare(a.publishedAt ?? ""));

  // tomar hasta 6
  const items = raw.slice(0, 6);

  // adaptar al shape que espera <PostCard />
  cards = items.map((p) => ({
    href: `/blog/${p.slug}/`,
    title: p.title,
    excerpt:
      (p.seoMeta as any)?.excerpt ??
      (p.content ? p.content.slice(0, 160) + "…" : ""),
    cover:
      (p.seoMeta as any)?.cover ??
      (p.seoMeta as any)?.image ??
      "/assets/png/DEVI NORMAL.png",
    tags: p.tags?.map((t) => t.name) ?? [],
    date: p.publishedAt ? formatDate(p.publishedAt) : "",
  }));
} catch (e) {
  console.error("[Home/PostList] GraphQL falló:", e);
  cards = [];
}
---
<section class="section relative bg-[var(--surface-1)]">
  <div class="absolute inset-0 -z-10 bg-grid"></div>
  <div class="mx-auto max-w-6xl px-6">
    <h2 class="text-2xl font-semibold text-[var(--color-title)] mb-6">
      Últimos artículos
    </h2>

    {cards.length ? (
      <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
        {cards.map((c) => <PostCard post={c} />)}
      </div>
    ) : (
      <div class="rounded-md border border-white/10 p-6 text-center opacity-70">
        No hay artículos para mostrar.
      </div>
    )}

    <div class="text-center mt-8">
      <a
        href="/blog/"
        class="inline-block rounded-md bg-[var(--color-accent)] text-[var(--color-accent-foreground)] px-5 py-2 font-medium hover:bg-[#B786F4] transition"
      >
        Ver todos
      </a>
    </div>
  </div>
</section>